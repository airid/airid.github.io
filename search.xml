<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[二维码安全的思考]]></title>
    <url>%2F2018%2FQRcodeSecurity%2F</url>
    <content type="text"><![CDATA[&#160; &#160; &#160; &#160;当今的摄像科技水平发展迅速,能拍的更远,更清晰,更智能化处理视频和图像信息.&#160; &#160; &#160; &#160;之前有做过远距离二维码识别的项目.所以有了下面的瞎想.&#160; &#160; &#160; &#160;如果结合高清摄像头和智能识别,可能会暴露很多人的个人手机隐私.当然本文中所提出的事情,千万别去实践,如果实践了,等待你的只有法律的制裁!!!本文的目的是为了让大众更好的保护个人的隐私.&#160; &#160; &#160; &#160;如今,很多二维码上有你的个人隐私信息,比如,加好友二维码,付款二维码,甚至是一些物品上的二维码,例如火车票二维码,汽车票二维码.&#160; &#160; &#160; &#160;现在的高清摄像头能轻松拍摄到20米甚至更远的二维码信息,并保存,如果用上智能图像处理技术,很容易就能识别到里面的二维码信息.&#160; &#160; &#160; &#160;这就意味着,如果你在公众场合暴露自己的个人隐私二维码信息,很可能会被摄像头拍摄到,并处理二维码信息,就会存在个人隐私暴露,暴露的可能是你的微信账号,支付宝账号,甚至是姓名,身份证信息.&#160; &#160; &#160; &#160;当然,你可能会问,为啥是二维码,而不是其他数字信息啥的,因为在视频和图像处理技术中,视频和图像信息是大量的,而二维码这种有特殊特征的东西会更容易被图像识别技术识别到,就像人脸识别一样,人脸和二维码都是有特殊特征的东西.当识别到二维码时,就可能会截取到有二维码信息的整个图像,如果是火车票和汽车票就会有个人姓名身份证信息.&#160; &#160; &#160; &#160;当然,不需要恐慌,普通人是做不到的,需要视频和图像处理技术,二维码识别技术,二维码解密技术,摄像头控制技术.拥有有这些技术的人才,一般也不会去做这种事情,因为他们的收入远高于依靠个人隐私获得的收益.意味着要实现这个也会需要大量的金钱.另外二维码本身也有加密.&#160; &#160; &#160; &#160;因为有可能会发生,所以,我也想了下面一些应对措施. 支付时,尽量扫描支付,防止二维码显露. 火车票,汽车票在非检票的公众场合中出示时,尽量挡住个人信息. 在活动现场中,尽量采取扫描其他人的二维码添加好友. 尽量不要在公共场合,暴露手机通信录界面. 尽量不要在公共场合,暴露自己的身份证驾驶证银行卡信息. &#160; &#160; &#160; &#160;当然,如果你是身价过亿的人,没用的,你毫无隐私可言.(斜眼笑)&#160; &#160; &#160; &#160;本文纯属胡思乱想.不要实践,不要实践!!!]]></content>
      <categories>
        <category>胡思乱想</category>
      </categories>
      <tags>
        <tag>胡思乱想</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[初识 .net core]]></title>
    <url>%2F2018%2Fdotnet-core-new%2F</url>
    <content type="text"><![CDATA[写在前面的话.net core出来很长时间了,之前探索过一次,感觉一般般,可能版本比较低的时候吧.今天无意中看到别人,推荐用 .net core做为游戏服务器的,还有很多成功案列.我大惊,发展这么快吗.如果真的可以,真的是优秀啊,静态语言,跨平台,强大的.net库,宇宙第一IDE.所以我就探索探索 .net core.发现确实很强大. 开发环境 操作系统: win10-x64 .net core版本: 2.1.302 IDE: visual studio code 安装 .net core从官网下载 .net core 安装.从官网下载 visual studio code 安装.安装完成后,可以在cmd命令中,输入dotnet测试是否安装成功1234#查询版本信息dotnet --version#查询帮助信息dotnet --help C:\Users&gt; dotnet –version2.1.302 C:\Users&gt; dotnet –help.NET 命令行工具 (2.1.302)… 如果是以上信息说明.net core安装成功 新建myApp控制台程序将以下代码存为”新建myApp.bat”,直接运行就能在当前bat文件目录下新建一个myApp的控制台程序,显示Hello World. 注意:文件所在的路径不能有特殊符号,最好是全英文路径,不然会失败. 123456789101112set nowPath=%cd%cd /cd %nowPath%md myAppcd myAppdotnet new consoledotnet publish -r win7-x86dotnet publish -r win7-x86 -c releasedotnet runpause 说明: (set nowPath=%cd%) (cd /) (cd %nowPath%)表示将cmd命令路径定位到当前目录文件夹下. (md myApp) (cd myApp)表示创建myApp文件夹,并将cmd命令路径定位到myApp文件夹下. dotnet new console 表示创建一个控制台程序 dotnet publish -r win7-x86 表示生成win7-x86平台下的debug程序 dotnet publish -r win7-x86 -c release 表示生成win7-x86平台下的release程序 dotnet run 表示运行当前程序 注意2.0以前版本需要dotnet restore,2.0版本后不需要输入 运行结果如下:123456789101112131415161718192021222324252627已成功创建模板“Console Application”。正在处理创建后操作...正在 C:\Users\C\Desktop\netcore\myApp\myApp.csproj 上运行 "dotnet restore"... 正在还原 C:\Users\C\Desktop\netcore\myApp\myApp.csproj 的包... 正在生成 MSBuild 文件 C:\Users\C\Desktop\netcore\myApp\obj\myApp.csproj.nuget.g.props。 正在生成 MSBuild 文件 C:\Users\C\Desktop\netcore\myApp\obj\myApp.csproj.nuget.g.targets。 C:\Users\C\Desktop\netcore\myApp\myApp.csproj 的还原在 181.55 ms 内完成。还原成功。用于 .NET Core 的 Microsoft (R) 生成引擎版本 15.7.179.6572版权所有(C) Microsoft Corporation。保留所有权利。 正在还原 C:\Users\C\Desktop\netcore\myApp\myApp.csproj 的包... 正在生成 MSBuild 文件 C:\Users\C\Desktop\netcore\myApp\obj\myApp.csproj.nuget.g.props。 正在生成 MSBuild 文件 C:\Users\C\Desktop\netcore\myApp\obj\myApp.csproj.nuget.g.targets。 C:\Users\C\Desktop\netcore\myApp\myApp.csproj 的还原在 208.44 ms 内完成。 myApp -&gt; C:\Users\C\Desktop\netcore\myApp\bin\Debug\netcoreapp2.1\win7-x86\myApp.dll myApp -&gt; C:\Users\C\Desktop\netcore\myApp\bin\Debug\netcoreapp2.1\win7-x86\publish\用于 .NET Core 的 Microsoft (R) 生成引擎版本 15.7.179.6572版权所有(C) Microsoft Corporation。保留所有权利。 C:\Users\C\Desktop\netcore\myApp\myApp.csproj 的还原在 45.44 ms 内完成。 myApp -&gt; C:\Users\C\Desktop\netcore\myApp\bin\release\netcoreapp2.1\win7-x86\myApp.dll myApp -&gt; C:\Users\C\Desktop\netcore\myApp\bin\release\netcoreapp2.1\win7-x86\publish\Hello World! 新建myWeb网页程序将以下代码存为”新建myWeb.bat”,直接运行就能在当前bat文件目录下新建一个myWeb的网页程序,显示Hello World. 123456789101112set nowPath=%cd%cd /cd %nowPath%md myWebcd myWebdotnet new webdotnet publishdotnet publish -c releasedotnet runpause 说明: dotnet new web 表示创建一个网页程序 dotnet publish 表示发布网页程序 dotnet publish -c release 表示发布网页release程序 dotnet run 表示运行网页程序 新建myWebMVC网页程序将以下代码存为”新建myWebMVC.bat”,直接运行就能在当前bat文件目录下新建一个myWebMVC的网页程序,即MVC(Model-View-Controller)模式的网页程序. 123456789101112set nowPath=%cd%cd /cd %nowPath%md myWebMVCcd myWebMVCdotnet new mvcdotnet publishdotnet publish -c releasedotnet runpause 说明: dotnet new mvc 表示创建一个MVC模式的网页程序 dotnet publish 表示发布网页程序 dotnet publish -c release 表示发布网页release程序 dotnet run 表示运行网页程序 .net core 的新建模版种类输入下面命令可以查看模版种类1dotnet new --help 模板 短名称 语言 标记 Console Application console [C#], F#, VB Common/Console Class library classlib [C#], F#, VB Common/Library Unit Test Project mstest [C#], F#, VB Test/MSTest xUnit Test Project xunit [C#], F#, VB Test/xUnit Razor Page page [C#] Web/ASP.NET MVC ViewImports viewimports [C#] Web/ASP.NET MVC ViewStart viewstart [C#] Web/ASP.NET ASP .NET Core Empty web [C#], F# Web/Empty ASP .NET Core Web App (Model-View-Controller) mvc [C#], F# Web/MVC ASP .NET Core Web App razor [C#] Web/MVC/Razor Pages ASP .NET Core with Angular angular [C#] Web/MVC/SPA ASP .NET Core with React.js react [C#] Web/MVC/SPA ASP .NET Core with React.js and Redux reactredux [C#] Web/MVC/SPA Razor Class Library razorclasslib [C#] Web/Razor/Library/Razor Class Library ASP .NET Core Web API webapi [C#], F# Web/WebAPI global.json file globaljson Config NuGet Config nugetconfig Config Web Config webconfig Config Solution File sln Solution .net core 跨平台的种类dotnet publish -r win7-x86 命令中的win7-x86可以换成其他平台的12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667Windows 7 / Windows Server 2008 R2win7-x64win7-x86Windows 8 / Windows Server 2012win8-x64win8-x86win8-armWindows 8.1 / Windows Server 2012 R2win81-x64win81-x86win81-armWindows 10 / Windows Server 2016win10-x64win10-x86win10-armwin10-arm64Red Hat Enterprise Linuxrhel.7-x64rhel.7.0-x64rhel.7.1-x64rhel.7.2-x64rhel.7.3-x64rhel.7.4-x64Ubuntuubuntu.14.04-x64ubuntu.14.10-x64ubuntu.15.04-x64ubuntu.15.10-x64ubuntu.16.04-x64ubuntu.16.10-x64CentOScentos.7-x64Debiandebian.8-x64Fedorafedora.23-x64fedora.24-x64OpenSUSEopensuse.13.2-x64opensuse.42.1-x64Oracle Linuxol.7-x64ol.7.0-x64ol.7.1-x64ol.7.2-x64Currently supported Ubuntu derivativeslinuxmint.17-x64linuxmint.17.1-x64linuxmint.17.2-x64linuxmint.17.3-x64linuxmint.18-x64OS X RIDsosx.10.10-x64osx.10.11-x64osx.10.12-x64 使用visual studio code 编辑和运行 .net core打开项目文件夹后,会提示安装C# for Visual Studio Code插件按F5可调试运行当前打开的项目,也可在左侧的调试界面中,点击调试,或者菜单栏中调试-启动调试,运行项目.修改程序也很方便,有自动补全功能. 感想 很强大!可以用脚本文件bat之类的,创建多个程序,避免了打开visual studio IDE创建的缓慢速度. 可以完全不依赖visual studio IDE,用visual studio code代替编写程序- 完全开源,跨平台. 缺点是还没有桌面程序图形界面. 静态语言,各种好处.]]></content>
      <categories>
        <category>.net</category>
        <category>.net core</category>
      </categories>
      <tags>
        <tag>.net core</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[网站更新记录]]></title>
    <url>%2F2018%2FSiteUpdate%2F</url>
    <content type="text"><![CDATA[2018-07-10 网站开始架设 2018-07-15 网站正式上线,网站说明在 关于 2018-07-17 添加文章分享功能,添加优惠券 优惠券]]></content>
      <categories>
        <category>Site</category>
        <category>Update</category>
      </categories>
      <tags>
        <tag>Github</tag>
        <tag>Hexo</tag>
        <tag>Site</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[学习Markdown]]></title>
    <url>%2F2018%2FLearnMarkdown%2F</url>
    <content type="text"><![CDATA[简介Markdown 是一种可以使用普通文本编辑器编写的标记语言,通过简单的标记语法,它可以使普通文本内容具有一定的格式。 HTML 的全称是HyperText Markup Language 超文本标记语言,注意里面的 Markup ,刚好和 Markdown 相反。 所以 Markdown 的意思应该是反标记,因为 Markup 是标记。 Markup 是内容上的处理,关注形式,样式,格式等等;而 Markdown 关注内容。 所以, Markdown 的主要用户也是作者,编辑和文档撰写者。 标题这是 H1这是 H2这是 H3这是 H4这是 H5这是 H6123456# 这是 H1## 这是 H2### 这是 H3#### 这是 H4##### 这是 H5###### 这是 H6 区块引用 区块引用Blockquotes 区块嵌套引用 嵌套引用内容. 区块引用标题H2 1234567&gt; 区块引用Blockquotes&gt; 区块嵌套引用&gt;&gt; &gt; 嵌套引用内容.&gt;&gt; ## 区块引用标题H1 列表 Red Green Blue Red Green Blue Red Green Blue Red Green Blue 12345678910111213* Red * Green * Blue+ Red + Green + Blue- Red - Green - Blue1. Red2. Green3. Blue 分隔线 123456* * *********- - ------------------------------------------- 链接This link 这是个链接 另一种链接 other link 这是个链接 1234567[This link](http://nianhao.site/) 这是个链接另一种链接 [other link] 这是个链接[other link]: http://nianhao.site/ "提示信息"[other link]: http://nianhao.site/ '提示信息'[other link]: http://nianhao.site/ (提示信息) 强调斜体_斜体_加粗加粗 1234*斜体*_斜体_**加粗**__加粗__ 图片 1![Alt text](/images/avatar.gif) 自动链接http://nianhao.site/&#x65;&#x78;&#x61;&#109;&#x70;&#108;&#101;&#64;&#115;&#x69;&#110;&#97;&#x2e;&#x63;&#x6e; 12&lt;http://nianhao.site/&gt;&lt;example@sina.cn&gt; 表格 id(居左) name(居中) score(居右) 1 M 90 2 F 80 3 A 95 12345| id(居左) | name(居中) | score(居右) || :------- | :--------: | ----------: || 1 | M | 90 || 2 | F | 80 || 3 | A | 95 | 代码Use the printf() function. 1Use the `printf()` function. 代码区块表示方法有两种: 四个空格 或者以下格式类型 ``` c printf(“Hello, World!”); ``` 这是一个代码区块. 1这是一个代码区块. 语言关键字 语言 关键字 1C 1c ActionScript actionscript Apache apache AppleScript applescript AsciiDoc asciidoc AspectJ asciidoc AutoHotkey autohotkey AVR Assembler avrasm Axapta axapta Bash bash BrainFuck brainfuck Cap\’ n Proto capnproto Clojure REPL clojure Clojure clojure CMake cmake CoffeeScript coffeescript C++ cpp C# cs CSS css D d Dart d Delphi delphi Diff diff Django django DOS.bat dos Dust dust Elixir elixir ERB(Embedded Ruby) erb Erlang REPL erlang-repl Erlang erlang FIX fix F# fsharp G-code(ISO 6983) gcode Gherkin gherkin GLSL glsl Go go Gradle gradle Groovy groovy Haml haml Handlebars handlebars Haskell haskell Haxe haxe HTML html HTTP http Ini file ini Java java JavaScript javascript JSON json Lasso lasso Less less Lisp lisp LiveCode livecodeserver LiveScript livescript Lua lua Makefile makefile Markdown markdown Mathematica mathematica Matlab matlab MEL (Maya Embedded Language) mel Mercury mercury Mizar mizar Monkey monkey Nginx nginx Nimrod nimrod Nix nix NSIS nsis Objective C objectivec OCaml ocaml Oxygene oxygene Parser 3 parser3 Perl perl PHP php PowerShell powershell Processing processing Python\’ s profiler output profile Protocol Buffers protobuf Puppet puppet Python python Q q R r RenderMan RIB rib Roboconf roboconf RenderMan RSL rsl Ruby ruby Oracle Rules Language ruleslanguage Rust rust Scala scala Scheme scheme Scilab scilab SCSS scss Smali smali SmallTalk smalltalk SML sml SQL sql Stata stata STEP Part21(ISO 10303-21) step21 Stylus stylus Swift swift Tcl tcl Tex tex text text/plain Thrift thrift Twig twig TypeScript typescript Vala vala VBScript in HTML vbscript-html VBScript vbscript Verilog verilog VHDL vhdl Vim Script vim Visual Basic vb Visual Basic . NET vbnet Intel x86 Assembly x86asm XL xl XML xml YAML yml 代码示例123456'vbModule MainFrm Sub Main() System.Console.WriteLine("Hello, World!") End SubEnd Module 1234567//c#include &lt;stdio.h&gt;int main()&#123; printf("Hello, World!"); return 0;&#125; 12345//gopackage mainfunc main() &#123; println("Hello, World!")&#125; 1234##bash@echo offecho Hello, World!pause 12345678//javapublic class HelloWorld&#123; public static void main(String[] args) &#123; System.out.println( "Hello, World!" ); &#125;&#125; 12345678//cpp#include &lt;iostream&gt;using namespace std;int main()&#123; cout&lt;&lt;"Hello, World!"&lt;&lt;flush; return 0;&#125; 1234567891011//csnamespace HelloWorld&#123; class Program &#123; static void Main(string[] args) &#123; System.Console.Write("Hello, World!"); &#125; &#125;&#125; 12//phpecho "Hello, World!"; 12//javascriptconsole.log("Hello, World!") 1234#python 2print "Hello, World!"#python 3print("Hello, World!") 1234#rubydef hello() return "Hello , World" end 结束]]></content>
      <categories>
        <category>Markdown</category>
        <category>Learn</category>
      </categories>
      <tags>
        <tag>Markdown</tag>
        <tag>Learn</tag>
      </tags>
  </entry>
  <entry>
    <title></title>
    <url>%2Fbaidu_verify_Zwg1EOeji2.html</url>
    <content type="text"><![CDATA[Zwg1EOeji2]]></content>
  </entry>
  <entry>
    <title></title>
    <url>%2Fbaidu_verify_tOPG5Q58RI.html</url>
    <content type="text"><![CDATA[tOPG5Q58RI]]></content>
  </entry>
  <entry>
    <title><![CDATA[404]]></title>
    <url>%2F%2F404.html</url>
    <content type="text"><![CDATA[尴尬,貌似没找到页面.返回首页]]></content>
  </entry>
  <entry>
    <title><![CDATA[关于本站]]></title>
    <url>%2Fabout%2Findex.html</url>
    <content type="text"><![CDATA[目录导航 个人信息 职业经历 技能清单 技术学习和分享 本站使用技术 优惠券 业余拓展项目 申请友情链接 留言区 个人信息蔡强 男 87年 浙江个人邮箱：airid#sina#cn毕业时间：2010学历：本科专业: 通信工程信息对抗GitHub：https://github.com/airid/ 职业经历已荒废了通信领域的东西,毕业后一直从事程序员搬砖相关工作.工作了很多年,依旧是个菜鸟一枚.从桌面程序VB(VisualBasic6.0)入门编程,之后转入C#(winform/wpf),然后接触C/C++,以及网页方面的Html,CSS,JavaScript,Python.游戏方面,从Untiy3D到Cocos2d-JS,仅涉略过. 技能清单 网页前端: HTML/CSS/JavaScript 网页后端: Python/C# 桌面端: VB,C#,C/C++ 数据库: MySQL/MSSQL/Oracle 技术学习和分享 语言技能：VB,C#,C/C++,Python,Html,CSS,JavaScript 框架及系统: CentOS,Nginx,Django 编程工具：Git,Visual Studio Code,Visual Studio 最新版 游戏: Cocos2d-JS,wechat mini program 其他: 工作生活的心得,以及各种天马行空的瞎想 本站使用技术 网站开源地址: https://github.com/airid/airid.github.io/ 网站域名: 万网,年号 网站服务器: Github Pages 网站网页驱动: Hexo官网 开源地址(MIT) Hexo Next主题官网 开源地址(MIT) 网站博文编写: Markdown 优惠券 阿里云优惠券&amp;优惠码: 9ofnl77g Coding优惠券&amp;优惠码: 8A7XOZ 业余拓展项目 本网站 [Cocos2d-JS小游戏开发中…] [微信小游戏开发中…] 申请友情链接必须是IT技术类相关的网站博客.请在本页留言或者发邮件到airid#sina#cn 留言区]]></content>
  </entry>
  <entry>
    <title><![CDATA[所有分类]]></title>
    <url>%2Fcategories%2Findex.html</url>
    <content type="text"></content>
  </entry>
  <entry>
    <title><![CDATA[标签]]></title>
    <url>%2Ftags%2Findex.html</url>
    <content type="text"></content>
  </entry>
</search>
